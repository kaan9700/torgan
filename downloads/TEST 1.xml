<?xml version="1.0" encoding="UTF-8"?>
<quiz>
    <!-- question: 0  -->
    <question type="category">
        <category>
            <text>
                TEST 1
            </text>
        </category>
        <info format="moodle_auto_format">
            <text></text>
        </info>
        <idnumber></idnumber>
    </question>
    <!-- question: 0  -->
    <question type="category">
        <category>
            <text>
                TEST 1
            </text>
        </category>
        <info format="html">
            <text></text>
        </info>
        <idnumber></idnumber>
    </question>
    <question type="coderunner">
        <name>
            <text>
                10.2. e) Römische Ziffer in Zahl umwandeln (Buchstabenkombination)
            </text>
        </name>
        <questiontext format="html">
            <text>
                &lt;p dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;Schreiben Sie ein Programm in C, welches aus einer einer einzelnen römischen Ziffer die entsprechende Dezimalzahl umwandelt. Hierfür soll die Ziffer mittels der Eingabe eingelesen werden.&amp;nbsp;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;Verwenden Sie folgende Umwandlungstabelle:&amp;nbsp;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;I=1 &amp;nbsp;V=5 &amp;nbsp;X=10 &amp;nbsp;L=50 &amp;nbsp;C=100 &amp;nbsp;D=500 &amp;nbsp;M=1000&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;Es kann nicht immer von den Nutzer:innen erwartet werden Großbuchstaben einzugeben, deshalb soll Ihr Program auch für Kleinbuchstaben gelten.&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;Erweitern Sie außerdem das Programm so, dass beliebig viele römische Ziffern eingegeben werden Können. Diese sollen dann zusammenaddiert werden und schließlich ausgegeben werden.&amp;nbsp;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;Zudem soll eine weitere Tabelle mit implementiert werden. Dieses mal handelt es sich um Buchstabenkombinationen die das Programm erkennen und gemäß der unteren Tabelle verrechnen.&amp;nbsp;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;Kombinationen:&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;IV = 4 &amp;nbsp; &amp;nbsp; IX = 9 &amp;nbsp; &amp;nbsp; XL = 40 &amp;nbsp; &amp;nbsp; XC = 90 &amp;nbsp; &amp;nbsp; CD = 400 &amp;nbsp; &amp;nbsp; CM = 900&lt;/p&gt;Bedenken Sie, dass auch hier sowohl Klein als auch Großbuchstaben verwendet werden können.&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;/p&gt;
            </text>
        </questiontext>
        <generalfeedback format="html">
            <text></text>
        </generalfeedback>
        <defaultgrade>
            1
        </defaultgrade>
        <penalty>
            0
        </penalty>
        <hidden>
            0
        </hidden>
        <idnumber></idnumber>
        <coderunnertype>
            c_program
        </coderunnertype>
        <prototypetype>
            0
        </prototypetype>
        <allornothing>
            1
        </allornothing>
        <penaltyregime>
            10, 20, ...
        </penaltyregime>
        <precheck>
            0
        </precheck>
        <hidecheck>
            0
        </hidecheck>
        <showsource>
            0
        </showsource>
        <answerboxlines>
            18
        </answerboxlines>
        <answerboxcolumns>
            100
        </answerboxcolumns>
        <answerpreload>
            #include &lt;stdio.h&gt;
int main (){
    
}
        </answerpreload>
        <globalextra></globalextra>
        <useace></useace>
        <resultcolumns></resultcolumns>
        <template></template>
        <iscombinatortemplate></iscombinatortemplate>
        <allowmultiplestdins></allowmultiplestdins>
        <answer>
            #include &lt;stdio.h&gt;
int main (){
    char eingabe[256];
    int ausgabe = 0;
    int length = 0;

    scanf(&quot;%s&quot;, eingabe);
    
    while (eingabe[length] != &apos;\0&apos;){ /*Bestimmung der Länge des Strings*/
        length++;
    }
    
    
  
 for(int i = 0; i&lt;length; i++){
     
    
    if(eingabe[i]==&apos;V&apos; || eingabe[i]==&apos;v&apos;){
        ausgabe = ausgabe + 5;
    }
    
    if(eingabe[i]==&apos;L&apos; || eingabe[i]==&apos;l&apos;){
        ausgabe = ausgabe + 50;
    }
    
    if(eingabe[i]==&apos;D&apos; || eingabe[i]==&apos;d&apos;){
        ausgabe = ausgabe + 500;
    } 
    
    if(eingabe[i]==&apos;M&apos; || eingabe[i]==&apos;m&apos;){
        ausgabe = ausgabe + 1000;
    } 
    
    if(eingabe[i] == &apos;I&apos; || eingabe[i]==&apos;i&apos;){
        if(eingabe[i+1]== &apos;V&apos; || eingabe[i+1]==&apos;v&apos;){ /* IV*/
            ausgabe = ausgabe + 4;
            i = i + 1;
            continue;
            
        }
        if(eingabe[i+1]== &apos;X&apos; || eingabe[i+1]==&apos;x&apos;){ /* IX*/
            ausgabe = ausgabe + 9;
            i = i + 1;
            continue;
        }
        if(eingabe[i+1] !=&apos;V&apos; &amp;&amp; eingabe[i+1] !=&apos;X&apos; &amp;&amp; eingabe[i+1] != &apos;v&apos; &amp;&amp; eingabe[i+1] !=&apos;x&apos;){
            ausgabe = ausgabe + 1;
        }
    }
    
    
    if(eingabe[i] == &apos;X&apos; || eingabe[i]==&apos;x&apos;){
        if(eingabe[i+1]== &apos;L&apos; || eingabe[i+1]==&apos;l&apos;){ /* XL*/
            ausgabe = ausgabe + 40;
            i = i + 1;
            continue;
        }
        if(eingabe[i+1]== &apos;C&apos; || eingabe[i+1]==&apos;c&apos;){ /* XC*/
            ausgabe = ausgabe + 90;
            i = i + 1;
            continue;
        }
        if(eingabe[i+1] !=&apos;L&apos; &amp;&amp; eingabe[i+1] !=&apos;C&apos; &amp;&amp; eingabe[i+1] != &apos;l&apos; &amp;&amp; eingabe[i+1] !=&apos;c&apos;){
            ausgabe = ausgabe + 10;
        }
    }
    

    
    if(eingabe[i] == &apos;C&apos; || eingabe[i]==&apos;c&apos;){
        if(eingabe[i+1]== &apos;D&apos; || eingabe[i+1]==&apos;d&apos;){ /* CD*/
            ausgabe = ausgabe + 400;
            i = i + 1;
            continue;
        }
        if(eingabe[i+1]== &apos;M&apos; || eingabe[i+1]==&apos;m&apos;){ /* CM*/
            ausgabe = ausgabe + 900;
            i = i + 1;
            continue;
        } 
        if(eingabe[i+1] !=&apos;D&apos; &amp;&amp; eingabe[i+1] !=&apos;M&apos; &amp;&amp; eingabe[i+1] != &apos;d&apos; &amp;&amp; eingabe[i+1] !=&apos;m&apos;){
            ausgabe = ausgabe + 100;
        }
    }
 }
    printf(&quot;%d&quot;, ausgabe);
    return 0;

}
        </answer>
        <validateonsave>
            1
        </validateonsave>
        <testsplitterre></testsplitterre>
        <language></language>
        <acelang></acelang>
        <sandbox></sandbox>
        <grader></grader>
        <cputimelimitsecs></cputimelimitsecs>
        <memlimitmb></memlimitmb>
        <sandboxparams></sandboxparams>
        <templateparams></templateparams>
        <hoisttemplateparams>
            1
        </hoisttemplateparams>
        <templateparamslang>
            None
        </templateparamslang>
        <templateparamsevalpertry>
            1
        </templateparamsevalpertry>
        <templateparamsevald>
            {}
        </templateparamsevald>
        <twigall>
            0
        </twigall>
        <uiplugin></uiplugin>
        <uiparameters></uiparameters>
        <attachments>
            0
        </attachments>
        <attachmentsrequired>
            0
        </attachmentsrequired>
        <maxfilesize>
            10240
        </maxfilesize>
        <filenamesregex></filenamesregex>
        <filenamesexplain></filenamesexplain>
        <displayfeedback>
            1
        </displayfeedback>
        <testcases>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        MCMLXXXIV
                    </text>
                </stdin>
                <expected>
                    <text>
                        1984
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        McDXcXI
                    </text>
                </stdin>
                <expected>
                    <text>
                        1501
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        CMcmXcXL
                    </text>
                </stdin>
                <expected>
                    <text>
                        1930
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        XLxCviMCD
                    </text>
                </stdin>
                <expected>
                    <text>
                        1536
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        HIDE
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        MCMCCdIXiv
                    </text>
                </stdin>
                <expected>
                    <text>
                        2413
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        HIDE
                    </text>
                </display>
            </testcase>
        </testcases>
    </question>
    <question type="coderunner">
        <name>
            <text>
                11.10. Reihe rekursiv berechnen
            </text>
        </name>
        <questiontext format="html">
            <text>
                &lt;p dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;Gegeben sei die Reihe:&amp;nbsp;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;&lt;img src=&quot;@@PLUGINFILE@@/Bildschirmfoto%202021-11-24%20um%2015.55.09.png&quot; alt=&quot;&quot; width=&quot;454&quot; height=&quot;38&quot; role=&quot;presentation&quot; class=&quot;img-responsive atto_image_button_text-bottom&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;Die Reihe soll bei n = N abgebrochen werden (das N-te Glied wird noch aufsummiert). Die Werte für a, x und N werden im Dialog eingegeben. y soll &lt;strong&gt;rekursiv&lt;/strong&gt; berechnet und ausgegeben werden. Hierzu dient das folgende C Programm. Ergänzen Sie die fehlenden Teile:&amp;nbsp;&lt;/p&gt;
            </text>
            <file name="Bildschirmfoto 2021-11-24 um 15.55.09.png" path="/" encoding="base64">
                
            </file>
        </questiontext>
        <generalfeedback format="html">
            <text></text>
        </generalfeedback>
        <defaultgrade>
            1
        </defaultgrade>
        <penalty>
            0
        </penalty>
        <hidden>
            0
        </hidden>
        <idnumber></idnumber>
        <coderunnertype>
            c_program
        </coderunnertype>
        <prototypetype>
            0
        </prototypetype>
        <allornothing>
            1
        </allornothing>
        <penaltyregime>
            10, 20, ...
        </penaltyregime>
        <precheck>
            0
        </precheck>
        <hidecheck>
            0
        </hidecheck>
        <showsource>
            0
        </showsource>
        <answerboxlines>
            18
        </answerboxlines>
        <answerboxcolumns>
            100
        </answerboxcolumns>
        <answerpreload>
            #include &lt;stdio.h&gt;

void einlesen(. . . .){
    
    printf(&quot;Gib einen ganzzahligen Wert fuer a ein: &quot;);
        scanf(&quot;%d&quot;, u);
    printf(&quot;\nGib einen reellen Wert fuer x ein: &quot;);
        scanf(&quot;%f&quot;, v);
    printf(&quot;\nGib einen ganzzahligen Wert fuer N ein: &quot;);
        scanf(&quot;%d&quot;, w);
}

float reku(int p1, int p2, int p3){
    
    . . . .
    
}

void ausgeben(float z){
    
    printf(&quot;\nDie Summe der Reihe ist: %.2f&quot;, z);
    
}

int main (void){
    
    int a,N;
    float x, summe_rek;
    
    einlesen(&amp;a, &amp;x, &amp;N);
    summe_rek = reku(a, x, N);
    ausgeben(summe_rek);
    
    return 0;
}
        </answerpreload>
        <globalextra></globalextra>
        <useace></useace>
        <resultcolumns></resultcolumns>
        <template></template>
        <iscombinatortemplate></iscombinatortemplate>
        <allowmultiplestdins></allowmultiplestdins>
        <answer>
            #include &lt;stdio.h&gt;

void einlesen(int * u, float * v, int * w){
    
    printf(&quot;Gib einen ganzzahligen Wert fuer a ein: &quot;);
        scanf(&quot;%d&quot;, u);
    printf(&quot;\nGib einen reellen Wert fuer x ein: &quot;);
        scanf(&quot;%f&quot;, v);
    printf(&quot;\nGib einen ganzzahligen Wert fuer N ein: &quot;);
        scanf(&quot;%d&quot;, w);
}

float reku (int p1, float p2, int p3){

    if(p3 !=0){
    
        return (p1+(p3*p2)) + reku(p1,p2,p3-1);
    }
    else{
        return (p1+(p3*p2));
    }
}

void ausgeben(float z){
    
    printf(&quot;\nDie Summe der Reihe ist: %.2f&quot;, z);
    
}

int main (void){
    
    int a,N;
    float x, summe_rek;
    
    einlesen(&amp;a, &amp;x, &amp;N);
    summe_rek = reku(a, x, N);
    ausgeben(summe_rek);
    
    return 0;
}
        </answer>
        <validateonsave>
            1
        </validateonsave>
        <testsplitterre></testsplitterre>
        <language></language>
        <acelang></acelang>
        <sandbox></sandbox>
        <grader></grader>
        <cputimelimitsecs></cputimelimitsecs>
        <memlimitmb></memlimitmb>
        <sandboxparams></sandboxparams>
        <templateparams></templateparams>
        <hoisttemplateparams>
            1
        </hoisttemplateparams>
        <templateparamslang>
            None
        </templateparamslang>
        <templateparamsevalpertry>
            1
        </templateparamsevalpertry>
        <templateparamsevald>
            {}
        </templateparamsevald>
        <twigall>
            0
        </twigall>
        <uiplugin></uiplugin>
        <uiparameters></uiparameters>
        <attachments>
            0
        </attachments>
        <attachmentsrequired>
            0
        </attachmentsrequired>
        <maxfilesize>
            10240
        </maxfilesize>
        <filenamesregex></filenamesregex>
        <filenamesexplain></filenamesexplain>
        <displayfeedback>
            1
        </displayfeedback>
        <testcases>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        2
2.5
5
                    </text>
                </stdin>
                <expected>
                    <text>
                        Gib einen ganzzahligen Wert fuer a ein:
Gib einen reellen Wert fuer x ein:
Gib einen ganzzahligen Wert fuer N ein:
Die Summe der Reihe ist: 49.50
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        4
0.6
18
                    </text>
                </stdin>
                <expected>
                    <text>
                        Gib einen ganzzahligen Wert fuer a ein:
Gib einen reellen Wert fuer x ein:
Gib einen ganzzahligen Wert fuer N ein:
Die Summe der Reihe ist: 178.60
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        9
5.2
2
                    </text>
                </stdin>
                <expected>
                    <text>
                        Gib einen ganzzahligen Wert fuer a ein:
Gib einen reellen Wert fuer x ein:
Gib einen ganzzahligen Wert fuer N ein:
Die Summe der Reihe ist: 42.60
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        8
4.4
3
                    </text>
                </stdin>
                <expected>
                    <text>
                        Gib einen ganzzahligen Wert fuer a ein:
Gib einen reellen Wert fuer x ein:
Gib einen ganzzahligen Wert fuer N ein:
Die Summe der Reihe ist: 58.40
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        HIDE
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        4
2.5
5
                    </text>
                </stdin>
                <expected>
                    <text>
                        Gib einen ganzzahligen Wert fuer a ein:
Gib einen reellen Wert fuer x ein:
Gib einen ganzzahligen Wert fuer N ein:
Die Summe der Reihe ist: 61.50
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        HIDE
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        7
3.3
9
                    </text>
                </stdin>
                <expected>
                    <text>
                        Gib einen ganzzahligen Wert fuer a ein:
Gib einen reellen Wert fuer x ein:
Gib einen ganzzahligen Wert fuer N ein:
Die Summe der Reihe ist: 218.50
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        HIDE
                    </text>
                </display>
            </testcase>
        </testcases>
    </question>
    <question type="coderunner">
        <name>
            <text>
                11.1. Blöcke
            </text>
        </name>
        <questiontext format="html">
            <text>
                &lt;p dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;Welche Zahlenwerte werden von dem folgenden Programm ausgegeben?&lt;br&gt;Analysieren Sie das Programm und ersetzen Sie die &quot;/*Ihre Eingabe*/&quot; in der im Folgenden&lt;br&gt;dargestellten Ausgabe durch die entsprechenden Ausgabewerte. Starten Sie das&lt;br&gt;Programm erst nach Ihrer Analyse.&lt;br&gt;&lt;/p&gt;
            </text>
        </questiontext>
        <generalfeedback format="html">
            <text></text>
        </generalfeedback>
        <defaultgrade>
            1
        </defaultgrade>
        <penalty>
            0
        </penalty>
        <hidden>
            0
        </hidden>
        <idnumber></idnumber>
        <coderunnertype>
            c_program
        </coderunnertype>
        <prototypetype>
            0
        </prototypetype>
        <allornothing>
            1
        </allornothing>
        <penaltyregime>
            10, 20, ...
        </penaltyregime>
        <precheck>
            0
        </precheck>
        <hidecheck>
            0
        </hidecheck>
        <showsource>
            0
        </showsource>
        <answerboxlines>
            18
        </answerboxlines>
        <answerboxcolumns>
            100
        </answerboxcolumns>
        <answerpreload>
            #include &lt;stdio.h&gt;

int x = 5;

void f1 (int * u) {
    int x = 4;
    *u = 6;
    int t3 = /*Ihre Eingabe*/;
    if(x == t3)
        printf (&quot;\nf1 - der Wert von x ist %d&quot;, t3);
}

void f2 (int x) {
    int t2 = /*Ihre Eingabe*/;
    if(x == t2)
        printf (&quot;\nf2 - der Wert von x ist %d&quot;, t2);
}

int main (void) {
    int t1 = /*Ihre Eingabe*/;
    if(x == t1)
        printf (&quot;main - der Wert von x ist %d&quot;, t1);
    f2 (7);
    f1 (&amp;x);
    
    int t4 = /*Ihre Eingabe*/;
    if(x == t4)
        printf (&quot;\nmain - der Wert von x ist %d&quot;, t4);
    return 0;
}
        </answerpreload>
        <globalextra></globalextra>
        <useace></useace>
        <resultcolumns></resultcolumns>
        <template></template>
        <iscombinatortemplate></iscombinatortemplate>
        <allowmultiplestdins></allowmultiplestdins>
        <answer>
            #include &lt;stdio.h&gt;

int x = 5;

void f1 (int * u) {
    int x = 4;
    *u = 6;
    int t3 = 4;
    if(x == t3)
        printf (&quot;\nf1 - der Wert von x ist %d&quot;, t3);
    t3 = x;
}

void f2 (int x) {
    int t2 = 7;
    if(x == t2)
        printf (&quot;\nf2 - der Wert von x ist %d&quot;, t2);
}

int main (void) {
    int t1 = 5;
    int t4 = 6;
    
    if(x == t1)
        printf (&quot;main - der Wert von x ist %d&quot;, t1);
    f2 (7);
    f1 (&amp;x);
    if(x == t4)
        printf (&quot;\nmain - der Wert von x ist %d&quot;, t4);
    return 0;
}
        </answer>
        <validateonsave>
            1
        </validateonsave>
        <testsplitterre></testsplitterre>
        <language></language>
        <acelang></acelang>
        <sandbox></sandbox>
        <grader></grader>
        <cputimelimitsecs></cputimelimitsecs>
        <memlimitmb></memlimitmb>
        <sandboxparams></sandboxparams>
        <templateparams></templateparams>
        <hoisttemplateparams>
            1
        </hoisttemplateparams>
        <templateparamslang>
            None
        </templateparamslang>
        <templateparamsevalpertry>
            1
        </templateparamsevalpertry>
        <templateparamsevald>
            {}
        </templateparamsevald>
        <twigall>
            0
        </twigall>
        <uiplugin></uiplugin>
        <uiparameters></uiparameters>
        <attachments>
            0
        </attachments>
        <attachmentsrequired>
            0
        </attachmentsrequired>
        <maxfilesize>
            10240
        </maxfilesize>
        <filenamesregex></filenamesregex>
        <filenamesexplain></filenamesexplain>
        <displayfeedback>
            1
        </displayfeedback>
        <testcases>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text></text>
                </stdin>
                <expected>
                    <text>
                        main - der Wert von x ist 5
f2 - der Wert von x ist 7
f1 - der Wert von x ist 4
main - der Wert von x ist 6
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        HIDE
                    </text>
                </display>
            </testcase>
        </testcases>
    </question>
</quiz>