<?xml version="1.0" encoding="UTF-8"?>
<quiz>
    <!-- question: 0  -->
    <question type="category">
        <category>
            <text>
                Sammlung1
            </text>
        </category>
        <info format="moodle_auto_format">
            <text></text>
        </info>
        <idnumber></idnumber>
    </question>
    <!-- question: 0  -->
    <question type="category">
        <category>
            <text>
                Sammlung1
            </text>
        </category>
        <info format="html">
            <text></text>
        </info>
        <idnumber></idnumber>
    </question>
    <question type="coderunner">
        <name>
            <text>
                10.1. Reihenentwicklung der Exponentialfunktion
            </text>
        </name>
        <questiontext format="html">
            <text>
                &lt;p&gt;&lt;span style=&quot;font-size: 0.9375rem;&quot;&gt;Schreiben Sie ein C Programm, welches die Exponentialfunktion e^z mit Hilfe einer Reihenentwicklung berechnet.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;@@PLUGINFILE@@/Bildschirmfoto%202021-11-16%20um%2019.12.18.png&quot; alt=&quot;&quot; role=&quot;presentation&quot; class=&quot;img-responsive atto_image_button_text-bottom&quot; width=&quot;398&quot; height=&quot;63&quot;&gt;&lt;/p&gt;&lt;p&gt;Dabei soll z reell und N ganzzahlig sein. Beide Zahlen sollen zunächst eingelesen werden. Geben Sie als Ausgabe das Ergebnis der Reihenentwicklung auf zwei Nachkommastellen genau an.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Beispiel :&amp;nbsp;&lt;/p&gt;&lt;p&gt;z = 2; n = 4&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;@@PLUGINFILE@@/Bildschirmfoto%202021-11-16%20um%2019.21.15.png&quot; alt=&quot;&quot; role=&quot;presentation&quot; class=&quot;img-responsive atto_image_button_text-bottom&quot; width=&quot;200&quot; height=&quot;67&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Hinweis :&amp;nbsp;&lt;/p&gt;&lt;p&gt;Die Terme der Reihe sollen in einer Schleife aufsummiert werden. Dabei sollen Fakultät und Potenz ebenfalls in der Schleife gebildet werden. Verwenden sie von daher keine Bibliotheksfunktionen.&amp;nbsp;&lt;/p&gt;
            </text>
            <file name="Bildschirmfoto 2021-11-16 um 19.12.18.png" path="/" encoding="base64">
                
            </file>
            <file name="Bildschirmfoto 2021-11-16 um 19.21.15.png" path="/" encoding="base64">
                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REcw0bHE5VvN1K5d2zRo0CD1V7FHxN4QQEAFSAxpBwgggAACCCCAAAJWgMSQhoAAAggggAACCCBgBUgMaQgIIIAAAggggAACVoDEkIaAAAIIIIAAAgggYAVIDGkICCCAAAIIIIAAAlaAxJCGgAACCCCAAAIIIGAFSAxpCAgggAACCCCAAAJWgMSQhoAAAggggAACCCBgBUgMaQgIIIAAAggggAACVoDEkIaAAAIIIIAAAgggYAVIDGkICCCAAAIIIIAAAlaAxJCGgAACCCCAAAIIIGAFSAxpCAgggAACCCCAAAJWgMSQhoAAAggggAACCCBgBUgMaQgIIIAAAggggAACVoDEkIaAAAIIIIAAAgggYAVIDGkICCCAAAIIIIAAAlaAxJCGgAACCCCAAAIIIGAFSAxpCAgggAACCCCAAAJWgMSQhoAAAggggAACCCBgBUgMaQgIIIAAAggggAACVoDEkIaAAAIIIIAAAgggYAVIDGkICCCAAAIIIIAAAlaAxJCGgAACCCCAAAIIIGAFSAxpCAgggAACCCCAAAJWgMSQhoAAAggggAACCCBgBUgMaQgIIIAAAggggAACVoDEkIaAAAIIIIAAAgggYAVIDGkICCCAAAIIIIAAAlaAxJCGgAACCCCAAAIIIGAFSAxpCAgggAACCCCAAAJWgMSQhoAAAggggAACCCBgBUgMaQgIIIAAAggggAACVoDEkIaAAAIIIIAAAgggYAVIDGkICCCAAAIIIIAAAlaAxJCGgAACCCCAAAIIIGAFSAxpCAgggAACCCCAAAJWgMSQhoAAAggggAACCCBgBUgMaQgIIIAAAggggAACVoDEkIaAAAIIIIAAAgggYAVIDGkICCCAAAIIIIAAAlaAxJCGgAACCCCAAAIIIGAFSAxpCAgggAACCCCAAAJWgMSQhoAAAggggAACCCBgBUgMaQgIIIAAAggggAACVoDEkIaAAAIIIIAAAgggYAVIDGkICCCAAAIIIIAAAlaAxJCGgAACCCCAAAIIIGAFSAxpCAgggAACCCCAAAJWgMSQhoAAAggggAACCCBgBUgMaQgIIIAAAggggAACVoDEkIaAAAIIIIAAAgggYAVIDGkICCCAAAIIIIAAAlaAxJCGgAACCCCAAAIIIGAFSAxpCAgggAACCCCAAAJWgMSQhoAAAggggAACCCBgBUgMaQgIIIAAAggggAACVoDEkIaAAAIIIIAAAgggYAVIDGkICCCAAAIIIIAAAlaAxJCGgAACCCCAAAIIIGAFSAxpCAgggAACCCCAAAJWgMSQhoAAAggggAACCCBgBUgMaQgIIIAAAggggAACVoDEkIaAAAIIIIAAAgggYAVIDGkICCCAAAIIIIAAAlaAxJCGgAACCCCAAAIIIGAFSAxpCAgggAACCCCAAAJWgMSQhoAAAggggAACCCBgBUgMaQgIIIAAAggggAACVuB/p10JD75puugAAAAASUVORK5CYII=
            </file>
        </questiontext>
        <generalfeedback format="html">
            <text></text>
        </generalfeedback>
        <defaultgrade>
            1
        </defaultgrade>
        <penalty>
            0
        </penalty>
        <hidden>
            0
        </hidden>
        <idnumber></idnumber>
        <coderunnertype>
            c_program
        </coderunnertype>
        <prototypetype>
            0
        </prototypetype>
        <allornothing>
            1
        </allornothing>
        <penaltyregime>
            10, 20, ...
        </penaltyregime>
        <precheck>
            0
        </precheck>
        <hidecheck>
            0
        </hidecheck>
        <showsource>
            0
        </showsource>
        <answerboxlines>
            18
        </answerboxlines>
        <answerboxcolumns>
            100
        </answerboxcolumns>
        <answerpreload>
            #include &lt;stdio.h&gt;
int main(){
    
}
        </answerpreload>
        <globalextra></globalextra>
        <useace></useace>
        <resultcolumns></resultcolumns>
        <template></template>
        <iscombinatortemplate></iscombinatortemplate>
        <allowmultiplestdins></allowmultiplestdins>
        <answer>
            #include &lt;stdio.h&gt;
int main(){
    
    double z;
    double ergebnis = 1;
    double fak = 1;
    double pot = 1;
    int n;
    
    scanf(&quot;%lf %d&quot;, &amp;z, &amp;n);
 
    if(n == 1){//Reihe besteht nur aus dem 1. Glied 
        ergebnis = 1;
        printf(&quot;%.2lf&quot;, ergebnis);
        return 0;
    } 
    
    if(n&gt;1) {
        for(int i = 1; i&lt;=n; i++) {
            pot = 1; //Potenz wird zurückgesetzt
            fak = 1; //Fakultät wird zurückgesetzt
            for(int j = 0; j&lt;i; j++) { //Schleife zur Berechnung der Potenzen
                pot = pot*z;
            }
            for(int j = i; j&gt;0; j--) { //Schleife zur Berechnung der Fakultät
                fak = fak * j;
            }
            ergebnis = (ergebnis + (pot)/(fak));
        }
        printf(&quot;%.2lf&quot;, ergebnis);
        return 0;
    }
    return 1;
}
        </answer>
        <validateonsave>
            1
        </validateonsave>
        <testsplitterre></testsplitterre>
        <language></language>
        <acelang></acelang>
        <sandbox></sandbox>
        <grader></grader>
        <cputimelimitsecs></cputimelimitsecs>
        <memlimitmb></memlimitmb>
        <sandboxparams></sandboxparams>
        <templateparams></templateparams>
        <hoisttemplateparams>
            1
        </hoisttemplateparams>
        <templateparamslang>
            None
        </templateparamslang>
        <templateparamsevalpertry>
            1
        </templateparamsevalpertry>
        <templateparamsevald>
            {}
        </templateparamsevald>
        <twigall>
            0
        </twigall>
        <uiplugin></uiplugin>
        <uiparameters></uiparameters>
        <attachments>
            0
        </attachments>
        <attachmentsrequired>
            0
        </attachmentsrequired>
        <maxfilesize>
            10240
        </maxfilesize>
        <filenamesregex></filenamesregex>
        <filenamesexplain></filenamesexplain>
        <displayfeedback>
            1
        </displayfeedback>
        <testcases>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        2 5
                    </text>
                </stdin>
                <expected>
                    <text>
                        7.27
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        3 8
                    </text>
                </stdin>
                <expected>
                    <text>
                        20.01
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        6 99
                    </text>
                </stdin>
                <expected>
                    <text>
                        403.43
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        2 20
                    </text>
                </stdin>
                <expected>
                    <text>
                        7.39
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        HIDE
                    </text>
                </display>
            </testcase>
        </testcases>
    </question>
    <question type="coderunner">
        <name>
            <text>
                10.2. a) Römische Ziffern in Zahl umwandeln
            </text>
        </name>
        <questiontext format="html">
            <text>
                &lt;p dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;Schreiben Sie ein Programm in C, welches aus einer einer einzelnen römischen Ziffer die entsprechende Dezimalzahl umwandelt. Hierfür soll die Ziffer mittels der Eingabe eingelesen werden.&amp;nbsp;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;Verwenden Sie folgende Umwandlungstabelle:&amp;nbsp;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;I=1 &amp;nbsp;V=5 &amp;nbsp;X=10 &amp;nbsp;L=50 &amp;nbsp;C=100 &amp;nbsp;D=500 &amp;nbsp;M=1000&lt;/p&gt;
            </text>
        </questiontext>
        <generalfeedback format="html">
            <text></text>
        </generalfeedback>
        <defaultgrade>
            1
        </defaultgrade>
        <penalty>
            0
        </penalty>
        <hidden>
            0
        </hidden>
        <idnumber></idnumber>
        <coderunnertype>
            c_program
        </coderunnertype>
        <prototypetype>
            0
        </prototypetype>
        <allornothing>
            1
        </allornothing>
        <penaltyregime>
            10, 20, ...
        </penaltyregime>
        <precheck>
            0
        </precheck>
        <hidecheck>
            0
        </hidecheck>
        <showsource>
            0
        </showsource>
        <answerboxlines>
            18
        </answerboxlines>
        <answerboxcolumns>
            100
        </answerboxcolumns>
        <answerpreload>
            #include &lt;stdio.h&gt;
int main (){

}
        </answerpreload>
        <globalextra></globalextra>
        <useace></useace>
        <resultcolumns></resultcolumns>
        <template></template>
        <iscombinatortemplate></iscombinatortemplate>
        <allowmultiplestdins></allowmultiplestdins>
        <answer>
            #include &lt;stdio.h&gt;
int main (){

    char eingabe;
    int ausgabe;
    scanf(&quot;%c&quot;, &amp;eingabe);

    if(eingabe ==&apos;I&apos;) {
        ausgabe = 1;
    }
    if(eingabe ==&apos;V&apos;){
        ausgabe = 5;
    }
    if(eingabe ==&apos;X&apos;){
        ausgabe = 10;
    }
    if(eingabe ==&apos;L&apos;){
        ausgabe = 50;
    }
    if(eingabe ==&apos;C&apos;){
        ausgabe = 100;
    }
    if(eingabe ==&apos;D&apos;){
        ausgabe = 500;
    }
    if(eingabe ==&apos;M&apos;){
        ausgabe = 1000;
    }
    
    printf(&quot;%d&quot;, ausgabe);
    return 0;

}
        </answer>
        <validateonsave>
            1
        </validateonsave>
        <testsplitterre></testsplitterre>
        <language></language>
        <acelang></acelang>
        <sandbox></sandbox>
        <grader></grader>
        <cputimelimitsecs></cputimelimitsecs>
        <memlimitmb></memlimitmb>
        <sandboxparams></sandboxparams>
        <templateparams></templateparams>
        <hoisttemplateparams>
            1
        </hoisttemplateparams>
        <templateparamslang>
            None
        </templateparamslang>
        <templateparamsevalpertry>
            1
        </templateparamsevalpertry>
        <templateparamsevald>
            {}
        </templateparamsevald>
        <twigall>
            0
        </twigall>
        <uiplugin></uiplugin>
        <uiparameters></uiparameters>
        <attachments>
            0
        </attachments>
        <attachmentsrequired>
            0
        </attachmentsrequired>
        <maxfilesize>
            10240
        </maxfilesize>
        <filenamesregex></filenamesregex>
        <filenamesexplain></filenamesexplain>
        <displayfeedback>
            1
        </displayfeedback>
        <testcases>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        I
                    </text>
                </stdin>
                <expected>
                    <text>
                        1
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        V
                    </text>
                </stdin>
                <expected>
                    <text>
                        5
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        X
                    </text>
                </stdin>
                <expected>
                    <text>
                        10
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        HIDE
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        L
                    </text>
                </stdin>
                <expected>
                    <text>
                        50
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        C
                    </text>
                </stdin>
                <expected>
                    <text>
                        100
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        HIDE
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        D
                    </text>
                </stdin>
                <expected>
                    <text>
                        500
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        M
                    </text>
                </stdin>
                <expected>
                    <text>
                        1000
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        HIDE
                    </text>
                </display>
            </testcase>
        </testcases>
    </question>
    <question type="coderunner">
        <name>
            <text>
                10.2. b) Römische Ziffern in Zahl umwandeln (kleinbuchstaben)
            </text>
        </name>
        <questiontext format="html">
            <text>
                &lt;p dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;Schreiben Sie ein Programm in C, welches aus einer einer einzelnen römischen Ziffer die entsprechende Dezimalzahl umwandelt. Hierfür soll die Ziffer mittels der Eingabe eingelesen werden.&amp;nbsp;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;Verwenden Sie folgende Umwandlungstabelle:&amp;nbsp;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;I=1 &amp;nbsp;V=5 &amp;nbsp;X=10 &amp;nbsp;L=50 &amp;nbsp;C=100 &amp;nbsp;D=500 &amp;nbsp;M=1000&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;Es kann nicht immer von den Nutzer:innen erwartet werden Großbuchstaben einzugeben, deshalb soll Ihr Program auch für Kleinbuchstaben gelten.&lt;br&gt;&lt;/p&gt;
            </text>
        </questiontext>
        <generalfeedback format="html">
            <text></text>
        </generalfeedback>
        <defaultgrade>
            1
        </defaultgrade>
        <penalty>
            0
        </penalty>
        <hidden>
            0
        </hidden>
        <idnumber></idnumber>
        <coderunnertype>
            c_program
        </coderunnertype>
        <prototypetype>
            0
        </prototypetype>
        <allornothing>
            1
        </allornothing>
        <penaltyregime>
            10, 20, ...
        </penaltyregime>
        <precheck>
            0
        </precheck>
        <hidecheck>
            0
        </hidecheck>
        <showsource>
            0
        </showsource>
        <answerboxlines>
            18
        </answerboxlines>
        <answerboxcolumns>
            100
        </answerboxcolumns>
        <answerpreload>
            #include &lt;stdio.h&gt;
int main (){

}
        </answerpreload>
        <globalextra></globalextra>
        <useace></useace>
        <resultcolumns></resultcolumns>
        <template></template>
        <iscombinatortemplate></iscombinatortemplate>
        <allowmultiplestdins></allowmultiplestdins>
        <answer>
            #include &lt;stdio.h&gt;
int main (){
    char eingabe;
    int ausgabe;
    scanf(&quot;%c&quot;, &amp;eingabe);

    switch(eingabe) {
        case &apos;i&apos;:
        case &apos;I&apos;:   ausgabe = 1;
                    break;
        case &apos;v&apos;:
        case &apos;V&apos;:   ausgabe = 5;
                    break;
        case &apos;x&apos;:
        case &apos;X&apos;:   ausgabe = 10;
                    break;
        case &apos;l&apos;:
        case &apos;L&apos;:   ausgabe = 50;
                    break;
        case &apos;c&apos;:
        case &apos;C&apos;:   ausgabe = 100;
                    break;
        case &apos;d&apos;:
        case &apos;D&apos;:   ausgabe = 500;
                    break;
        case &apos;m&apos;:
        case &apos;M&apos;:   ausgabe = 1000;
                    break;
    }
    printf(&quot;%d&quot;, ausgabe);
    return 0;

}
        </answer>
        <validateonsave>
            1
        </validateonsave>
        <testsplitterre></testsplitterre>
        <language></language>
        <acelang></acelang>
        <sandbox></sandbox>
        <grader></grader>
        <cputimelimitsecs></cputimelimitsecs>
        <memlimitmb></memlimitmb>
        <sandboxparams></sandboxparams>
        <templateparams></templateparams>
        <hoisttemplateparams>
            1
        </hoisttemplateparams>
        <templateparamslang>
            None
        </templateparamslang>
        <templateparamsevalpertry>
            1
        </templateparamsevalpertry>
        <templateparamsevald>
            {}
        </templateparamsevald>
        <twigall>
            0
        </twigall>
        <uiplugin></uiplugin>
        <uiparameters></uiparameters>
        <attachments>
            0
        </attachments>
        <attachmentsrequired>
            0
        </attachmentsrequired>
        <maxfilesize>
            10240
        </maxfilesize>
        <filenamesregex></filenamesregex>
        <filenamesexplain></filenamesexplain>
        <displayfeedback>
            1
        </displayfeedback>
        <testcases>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        I
                    </text>
                </stdin>
                <expected>
                    <text>
                        1
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        V
                    </text>
                </stdin>
                <expected>
                    <text>
                        5
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        X
                    </text>
                </stdin>
                <expected>
                    <text>
                        10
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        HIDE
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        L
                    </text>
                </stdin>
                <expected>
                    <text>
                        50
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        C
                    </text>
                </stdin>
                <expected>
                    <text>
                        100
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        HIDE
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        D
                    </text>
                </stdin>
                <expected>
                    <text>
                        500
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        M
                    </text>
                </stdin>
                <expected>
                    <text>
                        1000
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        HIDE
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        i
                    </text>
                </stdin>
                <expected>
                    <text>
                        1
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        v
                    </text>
                </stdin>
                <expected>
                    <text>
                        5
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        HIDE
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        x
                    </text>
                </stdin>
                <expected>
                    <text>
                        10
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        l
                    </text>
                </stdin>
                <expected>
                    <text>
                        50
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        c
                    </text>
                </stdin>
                <expected>
                    <text>
                        100
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        d
                    </text>
                </stdin>
                <expected>
                    <text>
                        500
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        HIDE
                    </text>
                </display>
            </testcase>
        </testcases>
    </question>
    <question type="coderunner">
        <name>
            <text>
                10.2. d) Römische Ziffer in Zahl umwandeln (Zeichenkette addieren)
            </text>
        </name>
        <questiontext format="html">
            <text>
                &lt;p dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;Schreiben Sie ein Programm in C, welches aus einer einer einzelnen römischen Ziffer die entsprechende Dezimalzahl umwandelt. Hierfür soll die Ziffer mittels der Eingabe eingelesen werden.&amp;nbsp;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;Verwenden Sie folgende Umwandlungstabelle:&amp;nbsp;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;I=1 &amp;nbsp;V=5 &amp;nbsp;X=10 &amp;nbsp;L=50 &amp;nbsp;C=100 &amp;nbsp;D=500 &amp;nbsp;M=1000&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;Es kann nicht immer von den Nutzer:innen erwartet werden Großbuchstaben einzugeben, deshalb soll Ihr Program auch für Kleinbuchstaben gelten.&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;Erweitern Sie außerdem das Programm so, dass beliebig viele römische Ziffern eingegeben werden Können. Diese sollen dann zusammenaddiert werden und schließlich ausgegeben werden.&amp;nbsp;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;Beispiel:&amp;nbsp;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;MDC&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;1600&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;/p&gt;
            </text>
        </questiontext>
        <generalfeedback format="html">
            <text></text>
        </generalfeedback>
        <defaultgrade>
            1
        </defaultgrade>
        <penalty>
            0
        </penalty>
        <hidden>
            0
        </hidden>
        <idnumber></idnumber>
        <coderunnertype>
            c_program
        </coderunnertype>
        <prototypetype>
            0
        </prototypetype>
        <allornothing>
            1
        </allornothing>
        <penaltyregime>
            10, 20, ...
        </penaltyregime>
        <precheck>
            0
        </precheck>
        <hidecheck>
            0
        </hidecheck>
        <showsource>
            0
        </showsource>
        <answerboxlines>
            18
        </answerboxlines>
        <answerboxcolumns>
            100
        </answerboxcolumns>
        <answerpreload></answerpreload>
        <globalextra></globalextra>
        <useace></useace>
        <resultcolumns></resultcolumns>
        <template></template>
        <iscombinatortemplate></iscombinatortemplate>
        <allowmultiplestdins></allowmultiplestdins>
        <answer>
            #include &lt;stdio.h&gt;
int main (){
    char eingabe[256];
    int ausgabe = 0;
    int length = 0;
    scanf(&quot;%s&quot;, eingabe);
    
    while (eingabe[length] != &apos;\0&apos;){ /*Bestimmung der Länge des Strings*/
        length++;
    }
    
  
 for(int i = 0; i&lt;length; i++){
     
     switch(eingabe[i]) {
        case &apos;i&apos;:
        case &apos;I&apos;:   ausgabe = ausgabe + 1;
                    break;
        case &apos;v&apos;:
        case &apos;V&apos;:   ausgabe = ausgabe + 5;
                    break;
        case &apos;x&apos;:
        case &apos;X&apos;:   ausgabe = ausgabe + 10;
                    break;
        case &apos;l&apos;:
        case &apos;L&apos;:   ausgabe = ausgabe + 50;
                    break;
        case &apos;c&apos;:
        case &apos;C&apos;:   ausgabe = ausgabe + 100;
                    break;
        case &apos;d&apos;:
        case &apos;D&apos;:   ausgabe = ausgabe + 500;
                    break;
        case &apos;m&apos;:
        case &apos;M&apos;:   ausgabe = ausgabe + 1000;
                    break;
    }
     
     
 }
    printf(&quot;%d&quot;, ausgabe);
    return 0;

}
        </answer>
        <validateonsave>
            1
        </validateonsave>
        <testsplitterre></testsplitterre>
        <language></language>
        <acelang></acelang>
        <sandbox></sandbox>
        <grader></grader>
        <cputimelimitsecs></cputimelimitsecs>
        <memlimitmb></memlimitmb>
        <sandboxparams></sandboxparams>
        <templateparams></templateparams>
        <hoisttemplateparams>
            1
        </hoisttemplateparams>
        <templateparamslang>
            None
        </templateparamslang>
        <templateparamsevalpertry>
            1
        </templateparamsevalpertry>
        <templateparamsevald>
            {}
        </templateparamsevald>
        <twigall>
            0
        </twigall>
        <uiplugin></uiplugin>
        <uiparameters></uiparameters>
        <attachments>
            0
        </attachments>
        <attachmentsrequired>
            0
        </attachmentsrequired>
        <maxfilesize>
            10240
        </maxfilesize>
        <filenamesregex></filenamesregex>
        <filenamesexplain></filenamesexplain>
        <displayfeedback>
            1
        </displayfeedback>
        <testcases>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        MDCCCCLXXXIIII
                    </text>
                </stdin>
                <expected>
                    <text>
                        1984
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        MMxXi
                    </text>
                </stdin>
                <expected>
                    <text>
                        2021
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        MDCLXvi
                    </text>
                </stdin>
                <expected>
                    <text>
                        1666
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        mLLLLXXvII
                    </text>
                </stdin>
                <expected>
                    <text>
                        1227
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        HIDE
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        mmddccllXXvvii
                    </text>
                </stdin>
                <expected>
                    <text>
                        3332
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        HIDE
                    </text>
                </display>
            </testcase>
        </testcases>
    </question>
    <question type="coderunner">
        <name>
            <text>
                10.2. c) Römische Ziffern in Zahl umwandeln (mehrteilige Eingabe)
            </text>
        </name>
        <questiontext format="html">
            <text>
                &lt;p dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;Schreiben Sie ein Programm in C, welches aus einer einer einzelnen römischen Ziffer die entsprechende Dezimalzahl umwandelt. Hierfür soll die Ziffer mittels der Eingabe eingelesen werden.&amp;nbsp;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;Verwenden Sie folgende Umwandlungstabelle:&amp;nbsp;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;I=1 &amp;nbsp;V=5 &amp;nbsp;X=10 &amp;nbsp;L=50 &amp;nbsp;C=100 &amp;nbsp;D=500 &amp;nbsp;M=1000&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;Es kann nicht immer von den Nutzer:innen erwartet werden Großbuchstaben einzugeben, deshalb soll Ihr Program auch für Kleinbuchstaben gelten.&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;Erweitern Sie außerdem das Programm so, dass beliebig viele römische Ziffern eingegeben werden Können. Diese sollen dann untereinander ausgegeben werden.&amp;nbsp;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;Beispiel:&amp;nbsp;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;MDC&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;1000&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;500&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;100&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;/p&gt;
            </text>
        </questiontext>
        <generalfeedback format="html">
            <text></text>
        </generalfeedback>
        <defaultgrade>
            1
        </defaultgrade>
        <penalty>
            0
        </penalty>
        <hidden>
            0
        </hidden>
        <idnumber></idnumber>
        <coderunnertype>
            c_program
        </coderunnertype>
        <prototypetype>
            0
        </prototypetype>
        <allornothing>
            1
        </allornothing>
        <penaltyregime>
            10, 20, ...
        </penaltyregime>
        <precheck>
            0
        </precheck>
        <hidecheck>
            0
        </hidecheck>
        <showsource>
            0
        </showsource>
        <answerboxlines>
            18
        </answerboxlines>
        <answerboxcolumns>
            100
        </answerboxcolumns>
        <answerpreload>
            #include &lt;stdio.h&gt;
int main (){
    
}
        </answerpreload>
        <globalextra></globalextra>
        <useace></useace>
        <resultcolumns></resultcolumns>
        <template></template>
        <iscombinatortemplate></iscombinatortemplate>
        <allowmultiplestdins></allowmultiplestdins>
        <answer>
            #include &lt;stdio.h&gt;
int main (){
    char eingabe[256];
    int ausgabe = 0;
    int length = 0;
    scanf(&quot;%s&quot;, eingabe);
    
    while (eingabe[length] != &apos;\0&apos;){ /*Bestimmung der Länge des Strings*/
        length++;
    }
    
  
 for(int i = 0; i&lt;length; i++){
     
     switch(eingabe[i]) {
        case &apos;i&apos;:
        case &apos;I&apos;:   ausgabe =  1;
                    break;
        case &apos;v&apos;:
        case &apos;V&apos;:   ausgabe =  5;
                    break;
        case &apos;x&apos;:
        case &apos;X&apos;:   ausgabe =  10;
                    break;
        case &apos;l&apos;:
        case &apos;L&apos;:   ausgabe =  50;
                    break;
        case &apos;c&apos;:
        case &apos;C&apos;:   ausgabe =  100;
                    break;
        case &apos;d&apos;:
        case &apos;D&apos;:   ausgabe =  500;
                    break;
        case &apos;m&apos;:
        case &apos;M&apos;:   ausgabe =  1000;
                    break;
    }
     
      printf(&quot;%d \n&quot;, ausgabe);
 }
   
    return 0;

}
        </answer>
        <validateonsave>
            1
        </validateonsave>
        <testsplitterre></testsplitterre>
        <language></language>
        <acelang></acelang>
        <sandbox></sandbox>
        <grader></grader>
        <cputimelimitsecs></cputimelimitsecs>
        <memlimitmb></memlimitmb>
        <sandboxparams></sandboxparams>
        <templateparams></templateparams>
        <hoisttemplateparams>
            1
        </hoisttemplateparams>
        <templateparamslang>
            None
        </templateparamslang>
        <templateparamsevalpertry>
            1
        </templateparamsevalpertry>
        <templateparamsevald>
            {}
        </templateparamsevald>
        <twigall>
            0
        </twigall>
        <uiplugin></uiplugin>
        <uiparameters></uiparameters>
        <attachments>
            0
        </attachments>
        <attachmentsrequired>
            0
        </attachmentsrequired>
        <maxfilesize>
            10240
        </maxfilesize>
        <filenamesregex></filenamesregex>
        <filenamesexplain></filenamesexplain>
        <displayfeedback>
            1
        </displayfeedback>
        <testcases>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        MDC
                    </text>
                </stdin>
                <expected>
                    <text>
                        1000
500
100
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        VdL
                    </text>
                </stdin>
                <expected>
                    <text>
                        5
500
50
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        iXcM
                    </text>
                </stdin>
                <expected>
                    <text>
                        1
10
100
1000
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        SHOW
                    </text>
                </display>
            </testcase>
            <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0000000">
                <testcode>
                    <text></text>
                </testcode>
                <stdin>
                    <text>
                        VxLc
                    </text>
                </stdin>
                <expected>
                    <text>
                        5
10
50
100
                    </text>
                </expected>
                <extra>
                    <text></text>
                </extra>
                <display>
                    <text>
                        HIDE
                    </text>
                </display>
            </testcase>
        </testcases>
    </question>
</quiz>